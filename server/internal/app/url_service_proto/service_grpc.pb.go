// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: service.proto

package url_service_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerUrlClient is the grpc_client API for ShortenerUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerUrlClient interface {
	CreateShortenUrl(ctx context.Context, in *CreateShortenUrlRequest, opts ...grpc.CallOption) (*CreateShortenUrlResponse, error)
	GetShortenUrl(ctx context.Context, in *GetShortenUrlRequest, opts ...grpc.CallOption) (*GetShortenUrlResponse, error)
}

type shortenerUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerUrlClient(cc grpc.ClientConnInterface) ShortenerUrlClient {
	return &shortenerUrlClient{cc}
}

func (c *shortenerUrlClient) CreateShortenUrl(ctx context.Context, in *CreateShortenUrlRequest, opts ...grpc.CallOption) (*CreateShortenUrlResponse, error) {
	out := new(CreateShortenUrlResponse)
	err := c.cc.Invoke(ctx, "/ShortenerUrl/CreateShortenUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerUrlClient) GetShortenUrl(ctx context.Context, in *GetShortenUrlRequest, opts ...grpc.CallOption) (*GetShortenUrlResponse, error) {
	out := new(GetShortenUrlResponse)
	err := c.cc.Invoke(ctx, "/ShortenerUrl/GetShortenUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerUrlServer is the server API for ShortenerUrl service.
// All implementations must embed UnimplementedShortenerUrlServer
// for forward compatibility
type ShortenerUrlServer interface {
	CreateShortenUrl(context.Context, *CreateShortenUrlRequest) (*CreateShortenUrlResponse, error)
	GetShortenUrl(context.Context, *GetShortenUrlRequest) (*GetShortenUrlResponse, error)
	mustEmbedUnimplementedShortenerUrlServer()
}

// UnimplementedShortenerUrlServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerUrlServer struct {
}

func (UnimplementedShortenerUrlServer) CreateShortenUrl(context.Context, *CreateShortenUrlRequest) (*CreateShortenUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenUrl not implemented")
}
func (UnimplementedShortenerUrlServer) GetShortenUrl(context.Context, *GetShortenUrlRequest) (*GetShortenUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortenUrl not implemented")
}
func (UnimplementedShortenerUrlServer) mustEmbedUnimplementedShortenerUrlServer() {}

// UnsafeShortenerUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerUrlServer will
// result in compilation errors.
type UnsafeShortenerUrlServer interface {
	mustEmbedUnimplementedShortenerUrlServer()
}

func RegisterShortenerUrlServer(s grpc.ServiceRegistrar, srv ShortenerUrlServer) {
	s.RegisterService(&ShortenerUrl_ServiceDesc, srv)
}

func _ShortenerUrl_CreateShortenUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerUrlServer).CreateShortenUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShortenerUrl/CreateShortenUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerUrlServer).CreateShortenUrl(ctx, req.(*CreateShortenUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerUrl_GetShortenUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortenUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerUrlServer).GetShortenUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShortenerUrl/GetShortenUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerUrlServer).GetShortenUrl(ctx, req.(*GetShortenUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerUrl_ServiceDesc is the grpc.ServiceDesc for ShortenerUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ShortenerUrl",
	HandlerType: (*ShortenerUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortenUrl",
			Handler:    _ShortenerUrl_CreateShortenUrl_Handler,
		},
		{
			MethodName: "GetShortenUrl",
			Handler:    _ShortenerUrl_GetShortenUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
